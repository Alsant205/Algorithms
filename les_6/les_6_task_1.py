import random
from sys import getsizeof
""""
ЗАДАНИЕ
Подсчитать, сколько было выделено памяти под переменные в ранее разработанных
программах в рамках первых трех уроков. Проанализировать результат и определить
программы с наиболее эффективным использованием памяти.
"""


def memory(x):
    # подсчет количества занимаемой памяти одной переменной
    if hasattr(x, '__iter__'):
        if hasattr(x, 'items'):
            for key, value in x.items():
                memory(key)
                memory(value)
        else:
            for item in x:
                memory(item)
    return getsizeof(x)


def get_variables_sum(*args):
    # суммирование памяти для каждой переменной в вызове
    variables_sum = 0
    for j in args:
        variables_sum = variables_sum + memory(j)
    print(f'Используемая память: {variables_sum} byte')


"""
ЗАДАЧА ДЛЯ ПРЕПАРИРОВАНИЯ
3.2. Во втором массиве сохранить индексы четных элементов первого
массива. Например, если дан массив со значениями 8, 3, 15, 6, 4, 2,
второй массив надо заполнить значениями 0, 3, 4, 5, (индексация
начинается с нуля), т.к. именно в этих позициях первого массива
стоят четные числа.
"""

# исходный массив
SIZE = 10
MIN_ITEM = 0
MAX_ITEM = 1000
array = [random.randint(MIN_ITEM, MAX_ITEM) for _ in range(SIZE)]
# print(array)

array_1 = []  # результирующий массив 1
for i in range(0, len(array)):
    if array[i] % 2 == 0:
        array_1.append(i)
# print(array_1)  # вывод результата не требуется, закомментируем


array_2 = []  # результирующий массив 2
pos_counter = 0
for i in array:
    if i % 2 == 0:
        array_2.append(pos_counter)
    pos_counter += 1
# print(array_2)  # вывод результата не требуется, закомментируем

array_3 = {}  # результирующий массив 3
for i in array:
    if i % 2 == 0:
        array_3.update({array.index(i): i})
# print(array_3.keys())  # вывод результата не требуется, закомментируем

"""
РЕЗУЛЬТАТ ТЕСТА
Версия системы:	macOS 11.4 (20F71) х86-64 ARM
"""
# array_1
get_variables_sum(SIZE, MIN_ITEM, MAX_ITEM, array, array_1)
# два списка, три числа, перебор в цикле по индексам (5 переменных)
# Используемая память: 384 byte

# array_2
get_variables_sum(SIZE, MIN_ITEM, MAX_ITEM, array, array_2, pos_counter)
# два списка, три числа, перебор в цикле по элементам и счетчик (6 переменных)
# Используемая память: 412 byte

# array_3
get_variables_sum(SIZE, MIN_ITEM, MAX_ITEM, array, array_3)
# список, словарь, три числа, перебор в цикле по элементам (5 переменных)
# Используемая память: 496 byte


"""
ВЫВОД
Увеличениии количества переменных приводит к росту используемой памяти. 
Во втором варианте добавился счетчик и объем памяти увеличился с 384 byte до 
412 byte. При этом если один из списков заменяем на словарь, объем еще больше
возрастает за счет того, что в словаре помимо значений указываеются еще и ключи.
Наиболее отимальным по используемой памяти является первый код, имеющий минимум 
переменных и наиболее простые структуры данных
"""
